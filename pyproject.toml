[project]
name = "pipelex-mcp"
version = "0.0.4"
description = "Pipelex MCP Server: Pipelex is an open-source dev tool based on a simple declarative language that lets you define replicable, structured, composable LLM pipelines."
authors = [{ name = "Evotis S.A.S.", email = "evotis@pipelex.com" }]
maintainers = [{ name = "Pipelex staff", email = "oss@pipelex.com" }]
license = "MIT"
requires-python = ">=3.11,<3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

dependencies = [
    "mcp[cli]>=1.6.0",
    "pipelex[mistralai,anthropic,google,bedrock,fal]==0.5.0",
]
[project.urls]
Homepage = "https://pipelex.com"
Repository = "https://github.com/Pipelex/pipelex-mcp"
Documentation = "https://github.com/Pipelex/pipelex/blob/main/doc/Documentation.md"
Changelog = "https://github.com/Pipelex/pipelex-mcp/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "mypy>=1.11.2",
    "pyright==1.1.381",
    "pytest>=8.3.3",
    "pytest-pretty==1.2.0",
    "pytest_asyncio>=0.24.0",
    "ruff>=0.6.8",
]

[tool.setuptools]
packages = ["pipelex_mcp"]

[tool.uv]
required-version = "0.7.2"

[tool.djlint]
ignore = "H006,H013,H021,H031,H037"
profile = "jinja"

[tool.mypy]
check_untyped_defs = true
exclude = "^.*\\.venv/.*$"
mypy_path = "."
packages = ["pipelex_mcp"]
plugins = ["pydantic.mypy"]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "autogen",
    "bson",
    "bson.objectid",
    "bson.binary",
    "duckduckgo_search",
    "fitz",
    "flask_assets",
    "flask_bcrypt",
    "flask_cors",
    "flask_pymongo",
    "flask_login",
    "flask_session",
    "flask_socketio",
    "flask_wtf",
    "google.auth.exceptions",
    "google.cloud",
    "google.cloud.bigquery",
    "google.cloud.exceptions",
    "google.cloud.storage",
    "google.oauth2",
    "google.oauth2.service_account",
    "google.cloud.pubsub",
    "gpt_researcher",
    "huggingface_hub",
    "huggingface_hub.inference._text_generation",
    "instructor",
    "json2html",
    "litellm",
    "litellm.router",
    "litellm.types.router",
    "md2pdf",
    "md2pdf.core",
    "pygsheets",
    "pymongo",
    "pymongo.collection",
    "pymongo.mongo_client",
    "pymongo.server_api",
    "pymupdf",
    "pymupdf.utils",
    "pymupdf4llm",
    "tavily",
    "websocket",
    "wtforms",
]

[tool.pyright]
analyzeUnannotatedFunctions = true
deprecateTypingAliases = false
disableBytesTypePromotions = true
enableExperimentalFeatures = false
enableTypeIgnoreComments = true
exclude = ["**/node_modules", "**/__pycache__"]
extraPaths = ["./tests"]
include = ["pipelex_mcp"]
pythonVersion = "3.11"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertAlwaysTrue = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallInDefaultInitializer = true
reportCallIssue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportGeneralTypeIssues = "error"
reportImplicitOverride = true
reportImplicitStringConcatenation = false
reportImportCycles = true
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeArguments = "error"
reportInvalidTypeForm = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingImports = "error"
reportMissingModuleSource = "warning"
reportMissingParameterType = "error"
reportMissingSuperCall = "none"
reportMissingTypeArgument = "error"
reportMissingTypeStubs = false
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportPrivateImportUsage = "error"
reportPrivateUsage = "error"
reportPropertyTypeMismatch = true
reportRedeclaration = "error"
reportReturnType = "error"
reportSelfClsParameterName = "error"
reportShadowedImports = true
reportTypeCommentUsage = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnboundVariable = "error"
reportUndefinedVariable = "error"
reportUninitializedInstanceVariable = "none"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportUnusedCallResult = "none"
reportUnusedClass = "error"
reportUnusedCoroutine = "error"
reportUnusedExcept = "error"
reportUnusedExpression = "error"
reportUnusedFunction = "error"
reportUnusedImport = "none"
reportUnusedVariable = "error"
reportWildcardImportFromLibrary = "error"
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib -ra -m 'not inference and not temporal and not imgg'"
asyncio_default_fixture_loop_scope = "session"
markers = [
    "inference: slow and costly due to inference calls",
    "llm: slow and costly due to llm inference calls",
    "imgg: slow and costly due to imgg inference calls",
    "gha_disabled: tests that should not run in GitHub Actions",
    "temporal: tests that require a temporal worker",
]
minversion = "8.0"

[tool.ruff]
exclude = [".mypy_cache", ".ruff_cache", ".venv", ".vscode", "trigger_pipeline"]
line-length = 150
target-version = "py311"

[tool.ruff.format]

[tool.ruff.lint]
external = ["F401"]
ignore = ["F401"]
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "A001",
    "A002",
    "A003",
    "RUF008",
    "RUF009",
    "RUF012",
    "RUF013",
    "RUF100",
    "E501",
    "I",
]
